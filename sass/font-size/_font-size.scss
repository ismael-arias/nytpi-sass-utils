// Throw an error if the size-class mixin already exists (prevent simultaneous loading with Size Class v2)
@if mixin-exists(font-size) {
	@error "font-size() mixin already exists --- Font Size v1.0 may have been imported already?";
}

@mixin font-size(
	$font-size: auto,
	$font-size-unit: em,

	$min-font-size: auto,
	$max-font-size: auto,

	$min-and-max-font-size-unit: px
) {
	$supported-units: _get-font-size-mixin-supported-units();

	// Init $font-size-context global if it hasn't already been initialized
	@if not global-variable-exists(font-size-context) {
		@include init-font-size-context();
	}

	// Begin validating arguments
	@if $font-size == auto {
		$font-size: $font-size-context;
	}

	@if type-of($font-size) != number or not unitless($font-size) {
		@error "The font-size() mixin doesn't accept a $font-size argument that is a Sass number with units (" + $font-size + "). Please try a unitless number instead.";
	}

	@if index($supported-units, $font-size-unit) == null {
		@error "The font-size() mixin doesn't support the '" + $font-size-unit + "' unit.";
	}

	// Additional validation for vw font-size-unit output
	@if $font-size-unit == vw {
		@if not global-variable-exists(size-class-config) {
			@if mixin-exists(init-size-class-config) {
				@include init-size-class-config();
			} @else {
				@error "Outputting in vw units requires three things: (1) @import-ing the nytpi-sass-utils/size-class library (before `@import 'nytpi-sass-utils/font-size';`), (2) a Size Class config with a 'pspx' layout type, and (3) calling font-size() within the content block of the size-class() mixin.";
			}
		}
		@if not size-class-config-has-layout-type(pspx) {
			@error "$size-class-config does not contain a 'pspx' layout type.";
		}
		@if not global-variable-exists(size-class-context) {
			@error "font-size() mixin was called outside of a size-class() mixin's content block, max-font-size with 'vw' as the output unit.";
		}
		@if not global-variable-exists(susy) or not susy-get(container) {
			@error "font-size() mixin was called in a context without Susy layout settings somehow, with 'vw' as the output unit.";
		}

		// ${min,max}-font-size validation
		@each $min-or-max, $value in (min: $min-font-size, max: $max-font-size) {
			@if not ($value == auto or $value == null or type-of($value) == number and unitless($value)) {
				@error "The font-size() mixin doesn't accept a $" + $min-or-max + "-font-size argument that is a Sass number with units (" + $value + "). Please try a unitless number instead. You can also use `auto` (to automatically determine a " + $min-or-max + "-font-size) or `null` (for no " + $min-or-max + "-font-size).";
			}
		}
	}
	// End validating arguments

	// Calculate the final font-size value
	$final-font-size-value: _convert-unitless-to-unit($font-size, $font-size-unit, $font-size-context);

	// Reassign $font-size-context and $font-size-unit-context in this scope and restore it once we're done
	$old-context: $font-size-context;
	$font-size-context: $font-size !global;

	$old-unit-context: $font-size-unit-context;
	$font-size-unit-context: $font-size-unit !global;

	//////////////////////////////////////////////////
	//// Actually write out a font-size property! ////
	//////////////////////////////////////////////////
	font-size: $final-font-size-value;

	// We only need to call min-font-size() and max-font-size() if we're outputting in vw units
	@if $font-size-unit == vw {
		@if $min-font-size {
			@include min-font-size($min-font-size, $min-and-max-font-size-unit, $font-size-context, auto);
		}

		@if $max-font-size {
			@include max-font-size($max-font-size, $min-and-max-font-size-unit, $font-size-context, auto);
		}
	}

	// Any calls to nytpi/number-functions in this mixin's content block will be aware of our current $font-size-context value
	@content;

	// Restore $font-size-context and $font-size-unit-context
	$font-size-context: $old-context !global;
	$font-size-unit-context: $old-unit-context !global;
}